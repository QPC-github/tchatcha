#+title: Captchacha: solution basique de vérification de formulaire

** Présentation

Ce dépôt contient une solution de Captcha mettant l'accès sur
l'accessibilité.

Le code a été initialement développée par la société [[https://www.artifica.fr/][Artifica]], dans le
contexte de la validation de formulaires pour le système de gestion de
contenu [[https://typo3.org/][TYPO3]].

La solution est actuellement disponible en PHP pour la partie serveur
et en Javascript pour la partie client, mais d'autres implémentations
sont possibles.

Si vous souhaitez contribuer, n'hésitez pas à [[mailto:opensource@data.gouv.fr][nous contacter]] ou à
[[https://github.com/etalab/etalabcha/issues][ouvrir une issue]].

** Documentation
*** Principe de fonctionnement

**** Côté frentend / Javascript

La partie JS est codée en natif. Le code est totalement indépendant de
toute autre librairie JS.

Mettre l’appel du fichier dans le footer du site:

: <script src="assets/captcha/captcha.js" type="text/javascript"></script>

Ajouter à la fin du formulaire, une balise de réception. 

: <div class="captcha"></div>

A la fin du chargement de la page, le JS va initialiser le captcha
dans le formulaire.

La fonction =init()= est lancée sur les éléments =.captcha=.

On peut effectivement avoir plusieurs formulaires dans la même page
avec des résolutions de captcha différentes.

Chaque élément passe par la fonction =prepare()= qui transmet la demande
de création d’un captcha via la fonction =execute()= au PHP.

Le retour de réponse est traité par la fonction =render()= qui injecte
le code dans l’élément =.captcha=.

Pour lancer la vérification du captcha, ajouter un événement au =submit=
du formulaire.

Cette partie a été ajouté afin d’avoir la main mise sur le retour de
la validation du captcha et ainsi agir selon la réponse.

Cela permet en autre d’envoyer le formulaire si la réponse est
positive, ou de lancer d’autres tests.

: document.forms['myForm857'].onsubmit = function(event){
:     window.captcha.validation(this, function(response, error){
:         if(!response)
:         {
:             if(error == 'msgError1')
:             {
:                 alert('Merci de remplir le captcha');
:             }
: 
:             if(error == 'msgError2')
:             {
:                 alert('Erreur sur le captcha. Merci de recommencer');
:             }
:         }
:         else
:         {
:             alert('Le captcha est ok');
:         }
:     });
:     event.preventDefault();
: };

On peut enlever cette étape et l’inclure dans l’initialisation du
captcha et injecter le onsubmit, mais il faut se garder la possibilité
d’un callback ou promise.

**** Côté backend / PHP (ou tout autre langage de programmation)

La partie PHP est codée en natif. Le code est totalement indépendant
de toute autre librairie PHP.

Le programme réagit à deux sortes de demandes, on peut étoffer les
fonctionnalités selon les besoins :

- render : création d’un captcha
- validate : vérification du captcha

À l’appel de celui-ci le code crée une instance de la classe
=tx_captchachaform_captcha()=.

*** Éléments d'accessibilité

Concernant l’accessibilité nous voulions un captcha textuel. A
l’origine ce captcha était un simple champ texte et l’internaute
devait rentrer la résolution du captcha. Nous sommes passé sur des
checkbox invisibles avec un affichage de carrés afin de rendre le
captcha plus conviviale. Le tout reste responsive.

Evolution possible, ajout un bouton son, pour une lecture vocal.

*** Intégrer à TYPO3

La solution captcha est complétement intégré dans nos CMS TYPO3. Elle
fait partie de notre solution "Form", extension de création et de
gestion des formulaires responsives.

A l’inverse de la première méthode en js direct, la validation se fait
en soumettant le formulaire.

On peut faire un mélange des deux principes, clé et rendu en backend,
et test de la clé en ajax.

Mais la méthode est identique dans TYPO3 que dans une autre solution.

*** Intégrer ailleurs

Au chargement du formulaire (ou à la création), instanciez la class
=tx_captchachaform_captcha=.

: $secure = new tx_captchachaform_captcha();

Il est possible d’injecter les messages d’erreurs pour les inclures
dans le rendu.

: $secure->_errorArray = $this->_arrErrors;

Récupérer le rendu html du captcha

: echo $secure->makeHtmlCode();

Récupérez la clé de chiffrement (valeur unique qui permettra le test).
Celle-ci peut être mise dans un champ hidden de votre formulaire :

: $arguments['checkKey'] =  $secure->getSecurCryptKey();

Enfin à la soumission du formulaire en GET ou en POST, on teste la
valeur envoyé par l’internaute et la clé de cryptage dans votre code
de validation, 

: $secure = new tx_captchachaform_captcha();
: $response = $secure->validate($arguments['checkKey'], $arguments['test']);

le retour de "validate" est un boolean.

** Licence

Le code source de ce dépôt est publié sous [[file:LICENSE][licence Apache 2.0]].

2020 DINUM, Etalab.
